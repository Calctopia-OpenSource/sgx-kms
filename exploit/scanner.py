# This is version 0.1 memory scanner
# Process memory scanner program for IDF 2016 SGX demoes
# Requires python-termcolor package (apt-get install python-termcolor)
# Requires root prevelige to run
# execute as "python scanner.py <PID of process to scan>
# Contact somnath.chakrabarti@intel.com for any questions

import string
import re
import sys
from termcolor import colored
pattern = re.compile(r"\b[^\W\d_]+\b")

# Read a line in /proc/pid/maps. Return the address boundaries of the entry
def maps_line_range(line):
    m = re.match(r'([0-9A-Fa-f]+)-([0-9A-Fa-f]+) ([-r])', line)
    #m = re.match(r'([0-9A-Fa-f]+)-([0-9A-Fa-f]+) ([-r][-w][-x][ps]) ([0-9a-f: ]+)("^/usr/lib")', line)
    #ignoring all disk and device mappings
    if "/usr" not in line and "/dev" not in line and "/lib" not in line:
        #print line
        return [int(m.group(1), 16), int(m.group(2), 16), m.group(3)]
    else:
        return [0,0,'x']


def cat_proc_mem(pid):
    ## Read the memory maps to see what address ranges are readable
    maps_file = open("/proc/" + pid + "/maps", 'r')
    ranges = map(maps_line_range, maps_file.readlines())
    maps_file.close()
    ## Read the readable mapped ranges
    mem_file = open("/proc/" + pid + "/mem", 'r', 0)
    for r in ranges:
        # dont want to go beyond stack
        if (r[2] == 'r') and (r[1] < 140737488355327) and (r[1] > r[0]):
            mem_file.seek(r[0])
            print colored('[0x'+format(r[0], "016x") + "-" + format(r[1], "016x")+']', 'green')
            try:
                chunk = mem_file.read(r[1] - r[0])
                filtered_string = filter(lambda x: x in string.printable, chunk)
                #print format(r[0], "016x"),"-", format(r[1], "016x"),":",pattern.findall(filtered_string),"\n"
                print colored(pattern.findall(filtered_string),'cyan')
            except:
                print colored("ERROR SCANNING THIS RANGE..CONTINUING\n", 'red')
    mem_file.close()
    print colored("\n\n\n SCANNING OVER !!!!\n\n\n", 'green')

cat_proc_mem(str(sys.argv[1]))
