/*
 * Copyright (C) 2011-2016 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

enclave {
    from "sgx_tkey_exchange.edl" import *;
    from "seal.edl" import *;

    include "sgx_key_exchange.h"
    include "sgx_quote.h"
    include "sgx_trts.h"
    include "remote_attestation_result.h"

    /* 
     * ocall_print_string - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
    untrusted {
        void ocall_print_string([in, string] const char *str);
    };

    trusted {
        // RA Client ECALLs
        public sgx_status_t enclave_init_ra(int b_pse,
                                            [out] sgx_ra_context_t *p_context, [in] sgx_ec256_public_t *pub_key);
        public sgx_status_t enclave_ra_close(sgx_ra_context_t context);
        public sgx_status_t verify_att_result_mac(sgx_ra_context_t context,
                                                  [in,size=message_size] uint8_t* message, 
                                                  size_t message_size, 
                                                  [in,size=mac_size] uint8_t* mac, 
                                                  size_t mac_size);
        public sgx_status_t client_put_secret_data(sgx_ra_context_t context, [in,size=secret_size] uint8_t* p_secret, uint32_t secret_size, [in,count=16] uint8_t* gcm_mac, [out, size=sealed_len] uint8_t *sealed_buf, size_t sealed_len);
        public sgx_status_t server_get_project_id(sgx_ra_context_t context, [in,size=secret_size] uint8_t* p_secret, uint32_t secret_size, [in,count=16] uint8_t* gcm_mac, [out, size=sealed_len] uint8_t *sealed_buf, size_t sealed_len);

        // RA Server ECALLS
        public void server_put_secret_data([in, size=sealed_len] uint8_t *sealed_sk, size_t sealed_len, [in, size=plain_ra_key_len] uint8_t *plain_ra_key, size_t plain_ra_key_len, [out, size=plain_ra_key_len] uint8_t * ra_key_enc_sk, [out, size=12] uint8_t *iv, [out, size=16] uint8_t *mac);

        // BarbiE Client (Common) ECALLs
        public sgx_status_t ecall_generate_key(size_t key_len, [out, size=sealed_key_len] uint8_t *sealed_key, size_t sealed_key_len);
        public int ecall_sealed_cmp([in, size=sealed_len1] uint8_t *sealed_key1, size_t sealed_len1, [in, size=sealed_len2] uint8_t *sealed_key2, size_t sealed_len2);
        public sgx_status_t ecall_transport_secret([in, size=sealed_key_len] uint8_t *sealed_key, size_t sealed_key_len, [in, size=sealed_secret_len] uint8_t *sealed_secret, size_t sealed_secret_len, [out, size=enc_secret_len] uint8_t * enc_secret, size_t enc_secret_len, [out, size=12] uint8_t *secret_iv, [out, size=16] uint8_t *secret_mac, [in, size=project_id_len] uint8_t *project_id, size_t project_id_len);
        public sgx_status_t ecall_encrypt([in, size=sealed_key_len] uint8_t *sealed_key, size_t sealed_key_len, [in, size=plain_text_len] uint8_t *plain_text, size_t plain_text_len, [out, size=plain_text_len] uint8_t * cypher_text, [out, size=12] uint8_t *iv, [out, size=16] uint8_t *mac, [in, size=project_id_len] uint8_t *project_id, size_t project_id_len);
        public sgx_status_t ecall_decrypt([in, size=sealed_key_len] uint8_t *sealed_key, size_t sealed_key_len, [out, size=plain_text_len] uint8_t *plain_text, size_t plain_text_len, [in, size=plain_text_len] uint8_t * cypher_text, [in, size=12] uint8_t *iv, [in, size=16] uint8_t *mac, [in, size=project_id_len] uint8_t *project_id, size_t project_id_len);

        // BarbiE Server ECALLs
        public sgx_status_t ecall_provision_kek([in, size=sealed_len] uint8_t *sealed_sk, size_t sealed_len, [in, size=enc_kek_len] uint8_t *enc_kek, size_t enc_kek_len, [in, size=12] uint8_t *iv, [in, size=16] uint8_t *mac, [out, size=sealed_kek_len] uint8_t *sealed_kek, size_t sealed_kek_len, [in, size=project_id_len]uint8_t *project_id, size_t project_id_len);
        public sgx_status_t ecall_get_secret([in, size=kek_enc_sk_len] uint8_t *kek_enc_sk, size_t kek_enc_sk_len, [in, size=12] uint8_t *sk_iv, [in, size=16] uint8_t *sk_mac, [in, size=sealed_kek_len] uint8_t *sealed_kek, size_t sealed_kek_len, [in, size=kek_enc_secret_len] uint8_t *kek_enc_secret, size_t kek_enc_secret_len, [out, size=sk_enc_secret_len] uint8_t *sk_enc_secret, size_t sk_enc_secret_len, [in, out, size=12] uint8_t *iv, [in, out, size=16] uint8_t *mac, [in, size=project_id_len]uint8_t *project_id, size_t project_id_len);
        public sgx_status_t ecall_store_secret([in, size=kek_enc_sk_len] uint8_t *kek_enc_sk, size_t kek_enc_sk_len, [in, size=12] uint8_t *sk_iv, [in, size=16] uint8_t *sk_mac, [in, size=sealed_kek_len] uint8_t *sealed_kek, size_t sealed_kek_len, [in, size=sk_enc_secret_len] uint8_t *sk_enc_secret, size_t sk_enc_secret_len, [out, size=kek_enc_secret_len] uint8_t * kek_enc_secret, size_t kek_enc_secret_len, [in, out, size=12] uint8_t *iv, [in, out, size=16] uint8_t *mac,[in, size=project_id_len] uint8_t *project_id, size_t project_id_len);

        public sgx_status_t ecall_get_ra_dh_key(sgx_ra_context_t context, [out, size=sealed_len] uint8_t *sealed_buf, size_t sealed_len);
        public sgx_status_t ecall_get_mr_enclave(sgx_ra_context_t context, [out, size=mr_e_len] uint8_t *mr_enclave, size_t mr_e_len);

        public int ecall_proc_ma([in, size=s_msg4_body_len] sample_ra_att_result_msg_t *s_msg4_body, size_t s_msg4_body_len, sgx_ra_context_t s_p_ctxt, [in, size=c_msg3_p_quote_len] sgx_quote_t *c_msg3_p_quote, size_t c_msg3_p_quote_len, [in] void **c_p_net_ctxt, [in, out, size=sealed_mk_len] uint8_t *sealed_mk, size_t sealed_mk_len, [in, out, size=mk_sk_len] uint8_t *mk_sk, size_t mk_sk_len, [in, out, size=12] uint8_t *iv, [in, out, size=16] uint8_t *mac, int policy, [in, size=attribute_len] uint8_t *attribute, size_t attribute_len, [in, size=12] uint8_t *iv1, [in, size=16] uint8_t *mac1, [out, size=c_msg4_body_len] sample_ra_att_result_msg_t *c_msg4_body, size_t c_msg4_body_len, [in, size=project_id_len] uint8_t *project_id, size_t project_id_len);

    };

};
